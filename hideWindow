#!/usr/bin/env node
const execSync = require('child_process').execSync
const path = require('path')
const fs = require('fs')
const configFile = `${__dirname}/hideWindowConfig.json`;

//unit in milliseconds
const sleepTime = 200

//desktop names
const defaultDesktop = '0'
const workDesktop = '1'
const hiddenDesktop = '2'


const functionMapping = {
	"switch_desktop": switchDesktop,
	"hide_active": hideActiveWindow,
	"unhide_all": unhideAllWindows,
	"change_window_desktop": changeActiveWindowDesktop,
	"show_hidden_count": listNumberOfHiddenWindows,
	"switch_to_hidden_workspace": toggleHiddenWindowsWorkspace,
	"hide_all_windows_on_current_desktop": hideAllWindowsOnCurrentDesktop,
	"maximize_all_windows_on_current_desktop": maximizeAllWindowsOnCurrentDesktop,
	"perform_login_actions": performLoginActions,
	'launch_app': launchApp,
	'ensure_desktop_panel_color': ensureCorrectDesktopPanelColor,
	"map": showMap
}

/**********************************************************************
 * UTILITY FUNCTIONS
 **********************************************************************/

function getConfigData() {
	let fileData = fs.readFileSync(configFile, { encoding: 'utf8' })
	return JSON.parse(fileData);
}

function updateConfigData(data) {
	fs.writeFileSync(configFile, JSON.stringify(data))
}

function logError(error) {
	let config = getConfigData();
	const timeStamp = `${new Date().toDateString()} - ${new Date().toLocaleTimeString()}`;
	const summarizedError = {
		message: error.message,
		file: error.fileName,
		line: error.lineNumber,
		timestamp: timeStamp
	}

	if (Array.isArray(config.error)) {
		if (config.error.length >= 5) {
			config.error.shift();
		}
	}
	else {
		config.error = [];
	}

	config.error.push(summarizedError);
	updateConfigData(config)
}

const utils = {
	data: {
		timeInMilliSeconds: 400
	},
	functions: {
		killOpenNotifs() {
			execSync('pkill -f notify-osd')
		},
		runCommand(command) {
			try {
				return execSync(command, { encoding: 'utf8' }).trim();
			} catch (error) {
				logError(error);
				return false;
			}
		}
	}
}

function sendNotification(message, timeInMilliSeconds = false) {
	// utils.functions.killOpenNotifs()
	if (timeInMilliSeconds) {
		execSync(`notify-send '${message}' -t ${timeInMilliSeconds}`)
		return;
	} else {
		execSync(`notify-send '${message}' -t ${utils.data.timeInMilliSeconds}`)
		return;
	}
}

function decideIndex(obj) {
	let isNotEmpty = JSON.stringify(obj) !== '{}'
	if (Boolean(obj) && isNotEmpty) {
		let lastIndex = Object.keys(obj)[Object.keys(obj).length - 1]
		let nextIndex = parseInt(lastIndex) + 1
		return nextIndex.toString()
	} else {
		return '0';
	}
}

function getLayout(collapsed = false) {
	const windowsToIgnore = ['xfce4-panel', 'Desktop', 'xfce4-notifyd']
	const desktopTable = { "0": {}, "1": {}, "2": {}, }
	const desktopTableArray = []

	let data = execSync('wmctrl -l -G | sort -n -k4', { encoding: 'utf8' })
	let lines = data.split("\n")

	if (lines[lines.length - 1] === '') lines.pop();

	for (let key in lines) {
		const currentLine = lines[key]
		const hostname = execSync(`hostname`, { encoding: 'utf-8' }).trimEnd();
		const regex = RegExp(`(?<=${hostname}\\s+).*`)
		const windowNameSearchResult = currentLine.match(regex);
		let windowName = false;
		let windowClass = false;

		let windowInfoArray = currentLine.split(' ');

		windowName = windowNameSearchResult ? windowNameSearchResult[0] : false;

		if (windowsToIgnore.includes(windowName) || !Boolean(windowName)) continue;

		let windowId = windowInfoArray[0]
		let desktopNumber = windowInfoArray[2]

		const windowClassCommandOutput = execSync(`xprop -id ${windowId} WM_CLASS`, { encoding: 'utf-8' }).trim()
		const windowClassSearchResult = windowClassCommandOutput.match(/(?<=WM_CLASS\(STRING\)\s+=\s+).*/i)
		windowClass = windowClassSearchResult ? windowClassSearchResult[0] : false;

		const windowData = { "windowId": windowId, "windowName": windowName, "windowClass": windowClass };

		if (!collapsed) {
			let index = decideIndex(desktopTable[desktopNumber])
			desktopTable[desktopNumber][index] = windowData
		} else {
			desktopTableArray.push(windowData);
		}
	}
	if (!collapsed) {
		return desktopTable;
	} else {
		return desktopTableArray;
	}
}


function getPanelColorChangeCommand({ red, green, blue, hue }) {
	return `xfconf-query -c xfce4-panel -p /panels/panel-1/background-rgba -t double -s ${red} -t double -s ${green} -t double -s ${blue} -t double -s ${hue} && xfconf-query -c xfce4-panel -p /panels/panel-2/background-rgba -t double -s ${red} -t double -s ${green} -t double -s ${blue} -t double -s ${hue}`
}



function setPanelBGColor(desktopNumber) {
	const desktopMap = { [defaultDesktop]: 'default', [workDesktop]: 'work', [hiddenDesktop]: 'hidden' }

	const commandTemplate = 'xfconf-query -c xfce4-panel  -p /plugins/plugin-2/grouping -s'
	const commands = { groupWindows: `${commandTemplate} true`, separateWindows: `${commandTemplate} false` };

	let BGMap = {
		'default': `${getPanelColorChangeCommand({ red: 0.207843, green: 0.517647, blue: 0.894118, hue: 1.000000 })} && ${commands.separateWindows}`,

		'work': `${getPanelColorChangeCommand({ red: 0.125490, green: 0.129412, blue: 0.141176, hue: 1.000000 })} && ${commands.separateWindows}`,

		'hidden': `${getPanelColorChangeCommand({ red: 0.752941, green: 0.109804, blue: 0.156863, hue: 1.000000 })} && ${commands.groupWindows}`,
	}

	execSync(BGMap[desktopMap[desktopNumber]]);
}

function updateConfigField(fieldName, data) {
	let config = getConfigData()
	config[fieldName] = data
	updateConfigData(config)
}

function printMapping() {
	console.log('available keys', functionMapping)
}


/**********************************************************************
 * ACTION(need to think of a better name) FUNCTIONS
 **********************************************************************/



function getActiveWindowId() {
	let command = "xdotool getactivewindow"
	let result = execSync(command, { encoding: 'utf8' })
	result = result.slice(0, result.length - 1)
	return result;
}

function listAllDesktops() {
	let command = "wmctrl -d"
	let result = execSync(command, { encoding: 'utf8' })
	let lines = result.split('\n')
	lines.pop();
	let desktops = lines.map((line) => {
		return line.slice(0, 1)
	})
	return desktops
}

function getActiveDesktop() {
	let command = "wmctrl -d | grep '*'"
	let result = execSync(command, { encoding: 'utf8' })
	result = result.slice(0, 1)
	return result;
}

/**
 * this would typically happen before a switch
 * @param desktopNumber
 */
function updateCurrentAsLastDesktop() {
	let config = getConfigData()
	let activeDesktop = getActiveDesktop()
	config['lastDesktop'] = activeDesktop
	updateConfigData(config)
}


function hideActiveWindow() {
	let activeDesktop = getActiveDesktop();
	let activeWindowId = getActiveWindowId()

	//if on hidden desktop, unhide instead
	if (activeDesktop === hiddenDesktop) {
		command = `wmctrl -i -r '${activeWindowId}' -t 1`
		execSync(command);
		sendNotification('window restored successfully')
	} else {
		//else, hide
		command = `wmctrl -i -r '${activeWindowId}' -t 2`
		execSync(command);
		sendNotification('window hidden successfully');
	}
}

function unhideWindow(windowId) {
	command = `wmctrl -i -r '${windowId}' -t 0`
	execSync(command);
}


function unhideAllWindows() {
	let layout = getLayout();
	let hiddenWindowArray = layout['2']
	sendNotification('RESTORING WINDOWS');
	for (let key in hiddenWindowArray) {
		unhideWindow(hiddenWindowArray[key].windowId)
	}
	sendNotification('WINDOWS RESTORED SUCCESSFULLY')
}

function hideWindowById(windowId) {
	command = `wmctrl -i -r '${windowId}' -t ${hiddenDesktop}`
	execSync(command);
}

function hideAllWindowsOnCurrentDesktop() {
	let activeDesktop = getActiveDesktop()

	if (activeDesktop === hiddenDesktop) {
		//do nothing
		sendNotification('that action is prohibited on the hidden workspace')
		return;
	} else {
		let desktopLayout = getLayout();
		let windowList = desktopLayout[activeDesktop]
		sendNotification('HIDING WINDOWS')
		for (let key in windowList) {
			let id = windowList[key].windowId
			hideWindowById(id)
		}
		sendNotification('WINDOWS HIDDEN SUCCESSFULLY')
	}

}

function maximizeSingleWindowById(id) {
	let commandToFocusWindow = `wmctrl -i -a ${id}`
	execSync(commandToFocusWindow)
	let commandToUnMaximize = `wmctrl -i -r ${id} -b remove,maximized_vert,maximized_horz`
	execSync(commandToUnMaximize)
	let commandToMaximize = `wmctrl -i -r ${id} -b add,maximized_vert,maximized_horz`
	execSync(commandToMaximize)
}

function maximizeAllWindowsOnCurrentDesktop() {
	let activeWindowId = getActiveWindowId();
	let activeDesktop = getActiveDesktop()
	let desktopLayout = getLayout();
	let windowList = desktopLayout[activeDesktop]
	let count = 0;

	while (count < 2) {
		for (let key in windowList) {
			let id = windowList[key].windowId
			maximizeSingleWindowById(id)
		}
		count++
	}
	execSync(`wmctrl -i -a ${activeWindowId}`)
}

function switchDesktop() {
	let activeDesktop = getActiveDesktop();

	if (activeDesktop === hiddenDesktop) {
		//do nothing
		sendNotification('that action is prohibited on the hidden workspace')
		return;
	} else {
		// switch the desktop
		let desktopToMoveTo = {
			'0': '1',
			'1': '0'
		}
		updateCurrentAsLastDesktop()
		let command = `wmctrl -s ${desktopToMoveTo[activeDesktop]}`
		setPanelBGColor(desktopToMoveTo[activeDesktop])
		execSync(command)
		sendNotification(`Desktop: ${parseInt(desktopToMoveTo[activeDesktop]) + 1}`)
		return;
	}
}

function toggleHiddenWindowsWorkspace() {
	//if on the hidden desktop, go to the last workspace
	if (getActiveDesktop() === '2') {
		let config = getConfigData()
		let lastDesktop = config['lastDesktop']

		setPanelBGColor(lastDesktop)

		//swtich to last desktop
		let command = `wmctrl -s ${lastDesktop}`
		execSync(command)
	} else {
		//go to hidden desktop
		updateCurrentAsLastDesktop()
		setPanelBGColor('2')
		execSync('wmctrl -s 2')
	}

}

function resolveWindowPosition(windowId, desktopId) {
	let destinationDesktopLayout = getLayout()[desktopId]
	let index = Object.keys(destinationDesktopLayout)[Object.keys(destinationDesktopLayout).length - 1]
	let idOflastWindowInDestination = destinationDesktopLayout[index].windowId

	let commandToResolveWindowPosition = `wmctrl -i -r ${windowId} -b remove,above && wmctrl -i -r ${idOflastWindowInDestination} -b add,above`
	execSync(commandToResolveWindowPosition)
}

function changeActiveWindowDesktop() {
	let activeWindowId = getActiveWindowId();
	let activeDesktop = getActiveDesktop()

	if (activeDesktop === hiddenDesktop) {
		//do nothing
		sendNotification('that action is prohibited on the hidden workspace')
		return;
	} else {
		let desktopToMoveTo = {
			'0': '1',
			'1': '0'
		}

		let destination = desktopToMoveTo[activeDesktop]
		let moveWindow = `wmctrl -i -r '${activeWindowId}' -t ${destination}`;
		execSync(moveWindow)
		//after moving the window to other desktop, set it as last item
		// resolveWindowPosition(activeWindowId, destination)
	}
}

function listNumberOfHiddenWindows() {
	let layout = getLayout();
	let hiddenWindowArray = layout['2']

	let objectKeys = Object.keys(hiddenWindowArray)
	let size = objectKeys.length
	sendNotification(`hidden: ${size} windows`, 2000)
}

function performLoginActions() {
	let commandRunCount = 0

	sendNotification('PERFORMING LOGIN ACTIONS: start....')
	while (commandRunCount < 4) {
		execSync(`wmctrl -s ${defaultDesktop}`)
		setPanelBGColor(defaultDesktop)
		commandRunCount++;
	}
	execSync('firefox --profile /home/tobecci/Documents/BrowserProfiles/Firefox/profileMenu --new-window about:profiles')
	sendNotification('PERFORMING LOGIN ACTIONS: END')

}

function showMap() {
	console.log({ functionMapping })
}

/**
 * returns the windowId and resident desktopNumber, if it exists
 */
function getWindowDetailsFromName() {

}

function launchApp() {
	console.log('launching apps');
	const desktopLayout = getLayout();
	// console.log(desktopLayout)
	console.log(utils.functions.runCommand('hostname'))
}

function toggleSocialGptWindows() {

}

function ensureCorrectDesktopPanelColor() {
	let previousDesktop = false;
	let sleepTimeInDecimal = sleepTime / 1000

	//infinite loop to monitor current desktop
	while (true) {
		console.log('loop iterating', { previousDesktop })
		execSync(`sleep ${sleepTimeInDecimal}`);
	}
}

function init() {
	const arg = process.argv
	const argument = arg.slice(2)[0]

	//if argument is truthy
	if (Boolean(argument)) {
		let functionToRun = functionMapping[argument]
		try {
			if (functionToRun) {
				functionToRun()
			} else {
				printMapping();
			}
		} catch (error) {
			logError(error)
			sendNotification('there was an error')
		}
	} else {
		printMapping()
	}
}

init();

/**
 * three finger swipe up hide window
 * meta+shift+space unhide all windows
 * three finger left, hide active window
 * four fingers left and right, switch workspace
 */

//command to maximize windows
// wmctrl -i -r <window_id> -b add,maximized_vert,maximized_horz

// work green color
// 'work': 'xfconf-query -c xfce4-panel -p /panels/panel-1/background-rgba -t double -s 0.011667 -t double -s 0.166667 -t double -s 0.022175 -t double -s 1.000000',
